//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var quiz_ttypes = require('./quiz_types')
var shared_ttypes = require('./shared_types')


var ttypes = module.exports = {};
ttypes.AtomType = {
  'QUIZ' : 0
};
ttypes.EventType = {
  'UPDATE' : 0,
  'TAKEDOWN' : 1
};
Atom = module.exports.Atom = function(args) {
  this.id = null;
  this.atomType = null;
  this.labels = null;
  this.defaultHtml = null;
  this.data = null;
  this.contentChangeDetails = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.atomType !== undefined) {
      this.atomType = args.atomType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field atomType is unset!');
    }
    if (args.labels !== undefined) {
      this.labels = args.labels;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field labels is unset!');
    }
    if (args.defaultHtml !== undefined) {
      this.defaultHtml = args.defaultHtml;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field defaultHtml is unset!');
    }
    if (args.data !== undefined) {
      this.data = args.data;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
    if (args.contentChangeDetails !== undefined) {
      this.contentChangeDetails = args.contentChangeDetails;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contentChangeDetails is unset!');
    }
  }
};
Atom.prototype = {};
Atom.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.atomType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.labels = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.labels.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.defaultHtml = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.AtomData();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.contentChangeDetails = new ttypes.ContentChangeDetails();
        this.contentChangeDetails.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Atom.prototype.write = function(output) {
  output.writeStructBegin('Atom');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.atomType !== null && this.atomType !== undefined) {
    output.writeFieldBegin('atomType', Thrift.Type.I32, 2);
    output.writeI32(this.atomType);
    output.writeFieldEnd();
  }
  if (this.labels !== null && this.labels !== undefined) {
    output.writeFieldBegin('labels', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.labels.length);
    for (var iter7 in this.labels)
    {
      if (this.labels.hasOwnProperty(iter7))
      {
        iter7 = this.labels[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.defaultHtml !== null && this.defaultHtml !== undefined) {
    output.writeFieldBegin('defaultHtml', Thrift.Type.STRING, 4);
    output.writeString(this.defaultHtml);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 5);
    this.data.write(output);
    output.writeFieldEnd();
  }
  if (this.contentChangeDetails !== null && this.contentChangeDetails !== undefined) {
    output.writeFieldBegin('contentChangeDetails', Thrift.Type.STRUCT, 6);
    this.contentChangeDetails.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AtomData = module.exports.AtomData = function(args) {
  this.quiz = null;
  if (args) {
    if (args.quiz !== undefined) {
      this.quiz = args.quiz;
    }
  }
};
AtomData.prototype = {};
AtomData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.quiz = new quiz_ttypes.QuizAtom();
        this.quiz.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AtomData.prototype.write = function(output) {
  output.writeStructBegin('AtomData');
  if (this.quiz !== null && this.quiz !== undefined) {
    output.writeFieldBegin('quiz', Thrift.Type.STRUCT, 1);
    this.quiz.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContentAtomEvent = module.exports.ContentAtomEvent = function(args) {
  this.atom = null;
  this.eventType = null;
  this.eventCreationTime = null;
  if (args) {
    if (args.atom !== undefined) {
      this.atom = args.atom;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field atom is unset!');
    }
    if (args.eventType !== undefined) {
      this.eventType = args.eventType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field eventType is unset!');
    }
    if (args.eventCreationTime !== undefined) {
      this.eventCreationTime = args.eventCreationTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field eventCreationTime is unset!');
    }
  }
};
ContentAtomEvent.prototype = {};
ContentAtomEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.atom = new ttypes.Atom();
        this.atom.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.eventCreationTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContentAtomEvent.prototype.write = function(output) {
  output.writeStructBegin('ContentAtomEvent');
  if (this.atom !== null && this.atom !== undefined) {
    output.writeFieldBegin('atom', Thrift.Type.STRUCT, 1);
    this.atom.write(output);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 2);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.eventCreationTime !== null && this.eventCreationTime !== undefined) {
    output.writeFieldBegin('eventCreationTime', Thrift.Type.I64, 3);
    output.writeI64(this.eventCreationTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContentChangeDetails = module.exports.ContentChangeDetails = function(args) {
  this.lastModified = null;
  this.created = null;
  this.published = null;
  this.revision = null;
  if (args) {
    if (args.lastModified !== undefined) {
      this.lastModified = args.lastModified;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.published !== undefined) {
      this.published = args.published;
    }
    if (args.revision !== undefined) {
      this.revision = args.revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field revision is unset!');
    }
  }
};
ContentChangeDetails.prototype = {};
ContentChangeDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastModified = new shared_ttypes.ChangeRecord();
        this.lastModified.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.created = new shared_ttypes.ChangeRecord();
        this.created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.published = new shared_ttypes.ChangeRecord();
        this.published.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContentChangeDetails.prototype.write = function(output) {
  output.writeStructBegin('ContentChangeDetails');
  if (this.lastModified !== null && this.lastModified !== undefined) {
    output.writeFieldBegin('lastModified', Thrift.Type.STRUCT, 1);
    this.lastModified.write(output);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.STRUCT, 2);
    this.created.write(output);
    output.writeFieldEnd();
  }
  if (this.published !== null && this.published !== undefined) {
    output.writeFieldBegin('published', Thrift.Type.STRUCT, 3);
    this.published.write(output);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 4);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

