/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tenfour;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-26")
public class Content implements org.apache.thrift.TBase<Content, Content._Fields>, java.io.Serializable, Cloneable, Comparable<Content> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Content");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UPDATED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedBy", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CREATED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("createdBy", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PUBLISHED_FIELD_DESC = new org.apache.thrift.protocol.TField("published", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DEFAULT_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultColumns", org.apache.thrift.protocol.TType.I16, (short)9);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContentTupleSchemeFactory());
  }

  public String id; // required
  public String title; // required
  public String updatedBy; // required
  public long updatedAt; // required
  public long createdAt; // required
  public String createdBy; // required
  public boolean published; // required
  public String type; // required
  public short defaultColumns; // required
  public ItemContent content; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    UPDATED_BY((short)3, "updatedBy"),
    UPDATED_AT((short)4, "updatedAt"),
    CREATED_AT((short)5, "createdAt"),
    CREATED_BY((short)6, "createdBy"),
    PUBLISHED((short)7, "published"),
    TYPE((short)8, "type"),
    DEFAULT_COLUMNS((short)9, "defaultColumns"),
    CONTENT((short)10, "content");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // UPDATED_BY
          return UPDATED_BY;
        case 4: // UPDATED_AT
          return UPDATED_AT;
        case 5: // CREATED_AT
          return CREATED_AT;
        case 6: // CREATED_BY
          return CREATED_BY;
        case 7: // PUBLISHED
          return PUBLISHED;
        case 8: // TYPE
          return TYPE;
        case 9: // DEFAULT_COLUMNS
          return DEFAULT_COLUMNS;
        case 10: // CONTENT
          return CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPDATEDAT_ISSET_ID = 0;
  private static final int __CREATEDAT_ISSET_ID = 1;
  private static final int __PUBLISHED_ISSET_ID = 2;
  private static final int __DEFAULTCOLUMNS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATED_BY, new org.apache.thrift.meta_data.FieldMetaData("updatedBy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "DateTime")));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "DateTime")));
    tmpMap.put(_Fields.CREATED_BY, new org.apache.thrift.meta_data.FieldMetaData("createdBy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLISHED, new org.apache.thrift.meta_data.FieldMetaData("published", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFAULT_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("defaultColumns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ItemContent")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Content.class, metaDataMap);
  }

  public Content() {
  }

  public Content(
    String id,
    String title,
    String updatedBy,
    long updatedAt,
    long createdAt,
    String createdBy,
    boolean published,
    String type,
    short defaultColumns,
    ItemContent content)
  {
    this();
    this.id = id;
    this.title = title;
    this.updatedBy = updatedBy;
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.createdBy = createdBy;
    this.published = published;
    setPublishedIsSet(true);
    this.type = type;
    this.defaultColumns = defaultColumns;
    setDefaultColumnsIsSet(true);
    this.content = content;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Content(Content other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetUpdatedBy()) {
      this.updatedBy = other.updatedBy;
    }
    this.updatedAt = other.updatedAt;
    this.createdAt = other.createdAt;
    if (other.isSetCreatedBy()) {
      this.createdBy = other.createdBy;
    }
    this.published = other.published;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.defaultColumns = other.defaultColumns;
    if (other.isSetContent()) {
      this.content = other.content;
    }
  }

  public Content deepCopy() {
    return new Content(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.title = null;
    this.updatedBy = null;
    setUpdatedAtIsSet(false);
    this.updatedAt = 0;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    this.createdBy = null;
    setPublishedIsSet(false);
    this.published = false;
    this.type = null;
    setDefaultColumnsIsSet(false);
    this.defaultColumns = 0;
    this.content = null;
  }

  public String getId() {
    return this.id;
  }

  public Content setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public Content setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getUpdatedBy() {
    return this.updatedBy;
  }

  public Content setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  public void unsetUpdatedBy() {
    this.updatedBy = null;
  }

  /** Returns true if field updatedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedBy() {
    return this.updatedBy != null;
  }

  public void setUpdatedByIsSet(boolean value) {
    if (!value) {
      this.updatedBy = null;
    }
  }

  public long getUpdatedAt() {
    return this.updatedAt;
  }

  public Content setUpdatedAt(long updatedAt) {
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    return this;
  }

  public void unsetUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  public void setUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDAT_ISSET_ID, value);
  }

  public long getCreatedAt() {
    return this.createdAt;
  }

  public Content setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    return this;
  }

  public void unsetCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public String getCreatedBy() {
    return this.createdBy;
  }

  public Content setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  public void unsetCreatedBy() {
    this.createdBy = null;
  }

  /** Returns true if field createdBy is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedBy() {
    return this.createdBy != null;
  }

  public void setCreatedByIsSet(boolean value) {
    if (!value) {
      this.createdBy = null;
    }
  }

  public boolean isPublished() {
    return this.published;
  }

  public Content setPublished(boolean published) {
    this.published = published;
    setPublishedIsSet(true);
    return this;
  }

  public void unsetPublished() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHED_ISSET_ID);
  }

  /** Returns true if field published is set (has been assigned a value) and false otherwise */
  public boolean isSetPublished() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHED_ISSET_ID);
  }

  public void setPublishedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHED_ISSET_ID, value);
  }

  public String getType() {
    return this.type;
  }

  public Content setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public short getDefaultColumns() {
    return this.defaultColumns;
  }

  public Content setDefaultColumns(short defaultColumns) {
    this.defaultColumns = defaultColumns;
    setDefaultColumnsIsSet(true);
    return this;
  }

  public void unsetDefaultColumns() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTCOLUMNS_ISSET_ID);
  }

  /** Returns true if field defaultColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultColumns() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTCOLUMNS_ISSET_ID);
  }

  public void setDefaultColumnsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTCOLUMNS_ISSET_ID, value);
  }

  public ItemContent getContent() {
    return this.content;
  }

  public Content setContent(ItemContent content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case UPDATED_BY:
      if (value == null) {
        unsetUpdatedBy();
      } else {
        setUpdatedBy((String)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((Long)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((Long)value);
      }
      break;

    case CREATED_BY:
      if (value == null) {
        unsetCreatedBy();
      } else {
        setCreatedBy((String)value);
      }
      break;

    case PUBLISHED:
      if (value == null) {
        unsetPublished();
      } else {
        setPublished((Boolean)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case DEFAULT_COLUMNS:
      if (value == null) {
        unsetDefaultColumns();
      } else {
        setDefaultColumns((Short)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((ItemContent)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case UPDATED_BY:
      return getUpdatedBy();

    case UPDATED_AT:
      return Long.valueOf(getUpdatedAt());

    case CREATED_AT:
      return Long.valueOf(getCreatedAt());

    case CREATED_BY:
      return getCreatedBy();

    case PUBLISHED:
      return Boolean.valueOf(isPublished());

    case TYPE:
      return getType();

    case DEFAULT_COLUMNS:
      return Short.valueOf(getDefaultColumns());

    case CONTENT:
      return getContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case UPDATED_BY:
      return isSetUpdatedBy();
    case UPDATED_AT:
      return isSetUpdatedAt();
    case CREATED_AT:
      return isSetCreatedAt();
    case CREATED_BY:
      return isSetCreatedBy();
    case PUBLISHED:
      return isSetPublished();
    case TYPE:
      return isSetType();
    case DEFAULT_COLUMNS:
      return isSetDefaultColumns();
    case CONTENT:
      return isSetContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Content)
      return this.equals((Content)that);
    return false;
  }

  public boolean equals(Content that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_updatedBy = true && this.isSetUpdatedBy();
    boolean that_present_updatedBy = true && that.isSetUpdatedBy();
    if (this_present_updatedBy || that_present_updatedBy) {
      if (!(this_present_updatedBy && that_present_updatedBy))
        return false;
      if (!this.updatedBy.equals(that.updatedBy))
        return false;
    }

    boolean this_present_updatedAt = true;
    boolean that_present_updatedAt = true;
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (this.updatedAt != that.updatedAt)
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_createdBy = true && this.isSetCreatedBy();
    boolean that_present_createdBy = true && that.isSetCreatedBy();
    if (this_present_createdBy || that_present_createdBy) {
      if (!(this_present_createdBy && that_present_createdBy))
        return false;
      if (!this.createdBy.equals(that.createdBy))
        return false;
    }

    boolean this_present_published = true;
    boolean that_present_published = true;
    if (this_present_published || that_present_published) {
      if (!(this_present_published && that_present_published))
        return false;
      if (this.published != that.published)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_defaultColumns = true;
    boolean that_present_defaultColumns = true;
    if (this_present_defaultColumns || that_present_defaultColumns) {
      if (!(this_present_defaultColumns && that_present_defaultColumns))
        return false;
      if (this.defaultColumns != that.defaultColumns)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_updatedBy = true && (isSetUpdatedBy());
    list.add(present_updatedBy);
    if (present_updatedBy)
      list.add(updatedBy);

    boolean present_updatedAt = true;
    list.add(present_updatedAt);
    if (present_updatedAt)
      list.add(updatedAt);

    boolean present_createdAt = true;
    list.add(present_createdAt);
    if (present_createdAt)
      list.add(createdAt);

    boolean present_createdBy = true && (isSetCreatedBy());
    list.add(present_createdBy);
    if (present_createdBy)
      list.add(createdBy);

    boolean present_published = true;
    list.add(present_published);
    if (present_published)
      list.add(published);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_defaultColumns = true;
    list.add(present_defaultColumns);
    if (present_defaultColumns)
      list.add(defaultColumns);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    return list.hashCode();
  }

  @Override
  public int compareTo(Content other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedBy()).compareTo(other.isSetUpdatedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedBy, other.updatedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedAt()).compareTo(other.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, other.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedBy()).compareTo(other.isSetCreatedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdBy, other.createdBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublished()).compareTo(other.isSetPublished());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublished()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.published, other.published);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultColumns()).compareTo(other.isSetDefaultColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultColumns, other.defaultColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Content(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedBy:");
    if (this.updatedBy == null) {
      sb.append("null");
    } else {
      sb.append(this.updatedBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedAt:");
    sb.append(this.updatedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdBy:");
    if (this.createdBy == null) {
      sb.append("null");
    } else {
      sb.append(this.createdBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("published:");
    sb.append(this.published);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultColumns:");
    sb.append(this.defaultColumns);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    if (updatedBy == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'updatedBy' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'updatedAt' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'createdAt' because it's a primitive and you chose the non-beans generator.
    if (createdBy == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'createdBy' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'published' because it's a primitive and you chose the non-beans generator.
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'defaultColumns' because it's a primitive and you chose the non-beans generator.
    if (content == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContentStandardSchemeFactory implements SchemeFactory {
    public ContentStandardScheme getScheme() {
      return new ContentStandardScheme();
    }
  }

  private static class ContentStandardScheme extends StandardScheme<Content> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Content struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPDATED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updatedBy = iprot.readString();
              struct.setUpdatedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedAt = iprot.readI64();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdBy = iprot.readString();
              struct.setCreatedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PUBLISHED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.published = iprot.readBool();
              struct.setPublishedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEFAULT_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.defaultColumns = iprot.readI16();
              struct.setDefaultColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.content = new ItemContent();
              struct.content.read(iprot);
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUpdatedAt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'updatedAt' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreatedAt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'createdAt' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPublished()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'published' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDefaultColumns()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'defaultColumns' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Content struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.updatedBy != null) {
        oprot.writeFieldBegin(UPDATED_BY_FIELD_DESC);
        oprot.writeString(struct.updatedBy);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
      oprot.writeI64(struct.updatedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.createdAt);
      oprot.writeFieldEnd();
      if (struct.createdBy != null) {
        oprot.writeFieldBegin(CREATED_BY_FIELD_DESC);
        oprot.writeString(struct.createdBy);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PUBLISHED_FIELD_DESC);
      oprot.writeBool(struct.published);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEFAULT_COLUMNS_FIELD_DESC);
      oprot.writeI16(struct.defaultColumns);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        struct.content.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContentTupleSchemeFactory implements SchemeFactory {
    public ContentTupleScheme getScheme() {
      return new ContentTupleScheme();
    }
  }

  private static class ContentTupleScheme extends TupleScheme<Content> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Content struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.title);
      oprot.writeString(struct.updatedBy);
      oprot.writeI64(struct.updatedAt);
      oprot.writeI64(struct.createdAt);
      oprot.writeString(struct.createdBy);
      oprot.writeBool(struct.published);
      oprot.writeString(struct.type);
      oprot.writeI16(struct.defaultColumns);
      struct.content.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Content struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.title = iprot.readString();
      struct.setTitleIsSet(true);
      struct.updatedBy = iprot.readString();
      struct.setUpdatedByIsSet(true);
      struct.updatedAt = iprot.readI64();
      struct.setUpdatedAtIsSet(true);
      struct.createdAt = iprot.readI64();
      struct.setCreatedAtIsSet(true);
      struct.createdBy = iprot.readString();
      struct.setCreatedByIsSet(true);
      struct.published = iprot.readBool();
      struct.setPublishedIsSet(true);
      struct.type = iprot.readString();
      struct.setTypeIsSet(true);
      struct.defaultColumns = iprot.readI16();
      struct.setDefaultColumnsIsSet(true);
      struct.content = new ItemContent();
      struct.content.read(iprot);
      struct.setContentIsSet(true);
    }
  }

}

