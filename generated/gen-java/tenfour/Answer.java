/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tenfour;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-27")
public class Answer implements org.apache.thrift.TBase<Answer, Answer._Fields>, java.io.Serializable, Cloneable, Comparable<Answer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Answer");

  private static final org.apache.thrift.protocol.TField ANSWER_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("answerText", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ASSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("assets", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CORRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("correct", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField REVEAL_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("revealText", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AnswerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AnswerTupleSchemeFactory());
  }

  public String answerText; // required
  public List<Asset> assets; // required
  public boolean correct; // required
  public String revealText; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANSWER_TEXT((short)1, "answerText"),
    ASSETS((short)2, "assets"),
    CORRECT((short)3, "correct"),
    REVEAL_TEXT((short)4, "revealText");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANSWER_TEXT
          return ANSWER_TEXT;
        case 2: // ASSETS
          return ASSETS;
        case 3: // CORRECT
          return CORRECT;
        case 4: // REVEAL_TEXT
          return REVEAL_TEXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CORRECT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REVEAL_TEXT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANSWER_TEXT, new org.apache.thrift.meta_data.FieldMetaData("answerText", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSETS, new org.apache.thrift.meta_data.FieldMetaData("assets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Asset"))));
    tmpMap.put(_Fields.CORRECT, new org.apache.thrift.meta_data.FieldMetaData("correct", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REVEAL_TEXT, new org.apache.thrift.meta_data.FieldMetaData("revealText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Answer.class, metaDataMap);
  }

  public Answer() {
  }

  public Answer(
    String answerText,
    List<Asset> assets,
    boolean correct)
  {
    this();
    this.answerText = answerText;
    this.assets = assets;
    this.correct = correct;
    setCorrectIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Answer(Answer other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAnswerText()) {
      this.answerText = other.answerText;
    }
    if (other.isSetAssets()) {
      List<Asset> __this__assets = new ArrayList<Asset>(other.assets.size());
      for (Asset other_element : other.assets) {
        __this__assets.add(other_element);
      }
      this.assets = __this__assets;
    }
    this.correct = other.correct;
    if (other.isSetRevealText()) {
      this.revealText = other.revealText;
    }
  }

  public Answer deepCopy() {
    return new Answer(this);
  }

  @Override
  public void clear() {
    this.answerText = null;
    this.assets = null;
    setCorrectIsSet(false);
    this.correct = false;
    this.revealText = null;
  }

  public String getAnswerText() {
    return this.answerText;
  }

  public Answer setAnswerText(String answerText) {
    this.answerText = answerText;
    return this;
  }

  public void unsetAnswerText() {
    this.answerText = null;
  }

  /** Returns true if field answerText is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerText() {
    return this.answerText != null;
  }

  public void setAnswerTextIsSet(boolean value) {
    if (!value) {
      this.answerText = null;
    }
  }

  public int getAssetsSize() {
    return (this.assets == null) ? 0 : this.assets.size();
  }

  public java.util.Iterator<Asset> getAssetsIterator() {
    return (this.assets == null) ? null : this.assets.iterator();
  }

  public void addToAssets(Asset elem) {
    if (this.assets == null) {
      this.assets = new ArrayList<Asset>();
    }
    this.assets.add(elem);
  }

  public List<Asset> getAssets() {
    return this.assets;
  }

  public Answer setAssets(List<Asset> assets) {
    this.assets = assets;
    return this;
  }

  public void unsetAssets() {
    this.assets = null;
  }

  /** Returns true if field assets is set (has been assigned a value) and false otherwise */
  public boolean isSetAssets() {
    return this.assets != null;
  }

  public void setAssetsIsSet(boolean value) {
    if (!value) {
      this.assets = null;
    }
  }

  public boolean isCorrect() {
    return this.correct;
  }

  public Answer setCorrect(boolean correct) {
    this.correct = correct;
    setCorrectIsSet(true);
    return this;
  }

  public void unsetCorrect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORRECT_ISSET_ID);
  }

  /** Returns true if field correct is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrect() {
    return EncodingUtils.testBit(__isset_bitfield, __CORRECT_ISSET_ID);
  }

  public void setCorrectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORRECT_ISSET_ID, value);
  }

  public String getRevealText() {
    return this.revealText;
  }

  public Answer setRevealText(String revealText) {
    this.revealText = revealText;
    return this;
  }

  public void unsetRevealText() {
    this.revealText = null;
  }

  /** Returns true if field revealText is set (has been assigned a value) and false otherwise */
  public boolean isSetRevealText() {
    return this.revealText != null;
  }

  public void setRevealTextIsSet(boolean value) {
    if (!value) {
      this.revealText = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANSWER_TEXT:
      if (value == null) {
        unsetAnswerText();
      } else {
        setAnswerText((String)value);
      }
      break;

    case ASSETS:
      if (value == null) {
        unsetAssets();
      } else {
        setAssets((List<Asset>)value);
      }
      break;

    case CORRECT:
      if (value == null) {
        unsetCorrect();
      } else {
        setCorrect((Boolean)value);
      }
      break;

    case REVEAL_TEXT:
      if (value == null) {
        unsetRevealText();
      } else {
        setRevealText((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANSWER_TEXT:
      return getAnswerText();

    case ASSETS:
      return getAssets();

    case CORRECT:
      return Boolean.valueOf(isCorrect());

    case REVEAL_TEXT:
      return getRevealText();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANSWER_TEXT:
      return isSetAnswerText();
    case ASSETS:
      return isSetAssets();
    case CORRECT:
      return isSetCorrect();
    case REVEAL_TEXT:
      return isSetRevealText();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Answer)
      return this.equals((Answer)that);
    return false;
  }

  public boolean equals(Answer that) {
    if (that == null)
      return false;

    boolean this_present_answerText = true && this.isSetAnswerText();
    boolean that_present_answerText = true && that.isSetAnswerText();
    if (this_present_answerText || that_present_answerText) {
      if (!(this_present_answerText && that_present_answerText))
        return false;
      if (!this.answerText.equals(that.answerText))
        return false;
    }

    boolean this_present_assets = true && this.isSetAssets();
    boolean that_present_assets = true && that.isSetAssets();
    if (this_present_assets || that_present_assets) {
      if (!(this_present_assets && that_present_assets))
        return false;
      if (!this.assets.equals(that.assets))
        return false;
    }

    boolean this_present_correct = true;
    boolean that_present_correct = true;
    if (this_present_correct || that_present_correct) {
      if (!(this_present_correct && that_present_correct))
        return false;
      if (this.correct != that.correct)
        return false;
    }

    boolean this_present_revealText = true && this.isSetRevealText();
    boolean that_present_revealText = true && that.isSetRevealText();
    if (this_present_revealText || that_present_revealText) {
      if (!(this_present_revealText && that_present_revealText))
        return false;
      if (!this.revealText.equals(that.revealText))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_answerText = true && (isSetAnswerText());
    list.add(present_answerText);
    if (present_answerText)
      list.add(answerText);

    boolean present_assets = true && (isSetAssets());
    list.add(present_assets);
    if (present_assets)
      list.add(assets);

    boolean present_correct = true;
    list.add(present_correct);
    if (present_correct)
      list.add(correct);

    boolean present_revealText = true && (isSetRevealText());
    list.add(present_revealText);
    if (present_revealText)
      list.add(revealText);

    return list.hashCode();
  }

  @Override
  public int compareTo(Answer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAnswerText()).compareTo(other.isSetAnswerText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerText, other.answerText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssets()).compareTo(other.isSetAssets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assets, other.assets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrect()).compareTo(other.isSetCorrect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correct, other.correct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevealText()).compareTo(other.isSetRevealText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevealText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revealText, other.revealText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Answer(");
    boolean first = true;

    sb.append("answerText:");
    if (this.answerText == null) {
      sb.append("null");
    } else {
      sb.append(this.answerText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assets:");
    if (this.assets == null) {
      sb.append("null");
    } else {
      sb.append(this.assets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("correct:");
    sb.append(this.correct);
    first = false;
    if (isSetRevealText()) {
      if (!first) sb.append(", ");
      sb.append("revealText:");
      if (this.revealText == null) {
        sb.append("null");
      } else {
        sb.append(this.revealText);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (answerText == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'answerText' was not present! Struct: " + toString());
    }
    if (assets == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'assets' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'correct' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AnswerStandardSchemeFactory implements SchemeFactory {
    public AnswerStandardScheme getScheme() {
      return new AnswerStandardScheme();
    }
  }

  private static class AnswerStandardScheme extends StandardScheme<Answer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Answer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANSWER_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.answerText = iprot.readString();
              struct.setAnswerTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ASSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.assets = new ArrayList<Asset>(_list32.size);
                Asset _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new Asset();
                  _elem33.read(iprot);
                  struct.assets.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setAssetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CORRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.correct = iprot.readBool();
              struct.setCorrectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REVEAL_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.revealText = iprot.readString();
              struct.setRevealTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCorrect()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'correct' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Answer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.answerText != null) {
        oprot.writeFieldBegin(ANSWER_TEXT_FIELD_DESC);
        oprot.writeString(struct.answerText);
        oprot.writeFieldEnd();
      }
      if (struct.assets != null) {
        oprot.writeFieldBegin(ASSETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.assets.size()));
          for (Asset _iter35 : struct.assets)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CORRECT_FIELD_DESC);
      oprot.writeBool(struct.correct);
      oprot.writeFieldEnd();
      if (struct.revealText != null) {
        if (struct.isSetRevealText()) {
          oprot.writeFieldBegin(REVEAL_TEXT_FIELD_DESC);
          oprot.writeString(struct.revealText);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AnswerTupleSchemeFactory implements SchemeFactory {
    public AnswerTupleScheme getScheme() {
      return new AnswerTupleScheme();
    }
  }

  private static class AnswerTupleScheme extends TupleScheme<Answer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Answer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.answerText);
      {
        oprot.writeI32(struct.assets.size());
        for (Asset _iter36 : struct.assets)
        {
          _iter36.write(oprot);
        }
      }
      oprot.writeBool(struct.correct);
      BitSet optionals = new BitSet();
      if (struct.isSetRevealText()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRevealText()) {
        oprot.writeString(struct.revealText);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Answer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.answerText = iprot.readString();
      struct.setAnswerTextIsSet(true);
      {
        org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.assets = new ArrayList<Asset>(_list37.size);
        Asset _elem38;
        for (int _i39 = 0; _i39 < _list37.size; ++_i39)
        {
          _elem38 = new Asset();
          _elem38.read(iprot);
          struct.assets.add(_elem38);
        }
      }
      struct.setAssetsIsSet(true);
      struct.correct = iprot.readBool();
      struct.setCorrectIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.revealText = iprot.readString();
        struct.setRevealTextIsSet(true);
      }
    }
  }

}

