/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tenfour;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-27")
public class ResultGroups implements org.apache.thrift.TBase<ResultGroups, ResultGroups._Fields>, java.io.Serializable, Cloneable, Comparable<ResultGroups> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResultGroups");

  private static final org.apache.thrift.protocol.TField GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("groups", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField REVEAL_AT_END_FIELD_DESC = new org.apache.thrift.protocol.TField("revealAtEnd", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResultGroupsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResultGroupsTupleSchemeFactory());
  }

  public List<ResultGroup> groups; // required
  public boolean revealAtEnd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUPS((short)1, "groups"),
    REVEAL_AT_END((short)2, "revealAtEnd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUPS
          return GROUPS;
        case 2: // REVEAL_AT_END
          return REVEAL_AT_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REVEALATEND_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUPS, new org.apache.thrift.meta_data.FieldMetaData("groups", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ResultGroup"))));
    tmpMap.put(_Fields.REVEAL_AT_END, new org.apache.thrift.meta_data.FieldMetaData("revealAtEnd", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResultGroups.class, metaDataMap);
  }

  public ResultGroups() {
  }

  public ResultGroups(
    List<ResultGroup> groups,
    boolean revealAtEnd)
  {
    this();
    this.groups = groups;
    this.revealAtEnd = revealAtEnd;
    setRevealAtEndIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResultGroups(ResultGroups other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGroups()) {
      List<ResultGroup> __this__groups = new ArrayList<ResultGroup>(other.groups.size());
      for (ResultGroup other_element : other.groups) {
        __this__groups.add(other_element);
      }
      this.groups = __this__groups;
    }
    this.revealAtEnd = other.revealAtEnd;
  }

  public ResultGroups deepCopy() {
    return new ResultGroups(this);
  }

  @Override
  public void clear() {
    this.groups = null;
    setRevealAtEndIsSet(false);
    this.revealAtEnd = false;
  }

  public int getGroupsSize() {
    return (this.groups == null) ? 0 : this.groups.size();
  }

  public java.util.Iterator<ResultGroup> getGroupsIterator() {
    return (this.groups == null) ? null : this.groups.iterator();
  }

  public void addToGroups(ResultGroup elem) {
    if (this.groups == null) {
      this.groups = new ArrayList<ResultGroup>();
    }
    this.groups.add(elem);
  }

  public List<ResultGroup> getGroups() {
    return this.groups;
  }

  public ResultGroups setGroups(List<ResultGroup> groups) {
    this.groups = groups;
    return this;
  }

  public void unsetGroups() {
    this.groups = null;
  }

  /** Returns true if field groups is set (has been assigned a value) and false otherwise */
  public boolean isSetGroups() {
    return this.groups != null;
  }

  public void setGroupsIsSet(boolean value) {
    if (!value) {
      this.groups = null;
    }
  }

  public boolean isRevealAtEnd() {
    return this.revealAtEnd;
  }

  public ResultGroups setRevealAtEnd(boolean revealAtEnd) {
    this.revealAtEnd = revealAtEnd;
    setRevealAtEndIsSet(true);
    return this;
  }

  public void unsetRevealAtEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVEALATEND_ISSET_ID);
  }

  /** Returns true if field revealAtEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetRevealAtEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __REVEALATEND_ISSET_ID);
  }

  public void setRevealAtEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVEALATEND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUPS:
      if (value == null) {
        unsetGroups();
      } else {
        setGroups((List<ResultGroup>)value);
      }
      break;

    case REVEAL_AT_END:
      if (value == null) {
        unsetRevealAtEnd();
      } else {
        setRevealAtEnd((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUPS:
      return getGroups();

    case REVEAL_AT_END:
      return Boolean.valueOf(isRevealAtEnd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUPS:
      return isSetGroups();
    case REVEAL_AT_END:
      return isSetRevealAtEnd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResultGroups)
      return this.equals((ResultGroups)that);
    return false;
  }

  public boolean equals(ResultGroups that) {
    if (that == null)
      return false;

    boolean this_present_groups = true && this.isSetGroups();
    boolean that_present_groups = true && that.isSetGroups();
    if (this_present_groups || that_present_groups) {
      if (!(this_present_groups && that_present_groups))
        return false;
      if (!this.groups.equals(that.groups))
        return false;
    }

    boolean this_present_revealAtEnd = true;
    boolean that_present_revealAtEnd = true;
    if (this_present_revealAtEnd || that_present_revealAtEnd) {
      if (!(this_present_revealAtEnd && that_present_revealAtEnd))
        return false;
      if (this.revealAtEnd != that.revealAtEnd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_groups = true && (isSetGroups());
    list.add(present_groups);
    if (present_groups)
      list.add(groups);

    boolean present_revealAtEnd = true;
    list.add(present_revealAtEnd);
    if (present_revealAtEnd)
      list.add(revealAtEnd);

    return list.hashCode();
  }

  @Override
  public int compareTo(ResultGroups other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGroups()).compareTo(other.isSetGroups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groups, other.groups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevealAtEnd()).compareTo(other.isSetRevealAtEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevealAtEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revealAtEnd, other.revealAtEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResultGroups(");
    boolean first = true;

    sb.append("groups:");
    if (this.groups == null) {
      sb.append("null");
    } else {
      sb.append(this.groups);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("revealAtEnd:");
    sb.append(this.revealAtEnd);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (groups == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'groups' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'revealAtEnd' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultGroupsStandardSchemeFactory implements SchemeFactory {
    public ResultGroupsStandardScheme getScheme() {
      return new ResultGroupsStandardScheme();
    }
  }

  private static class ResultGroupsStandardScheme extends StandardScheme<ResultGroups> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResultGroups struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.groups = new ArrayList<ResultGroup>(_list8.size);
                ResultGroup _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new ResultGroup();
                  _elem9.read(iprot);
                  struct.groups.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setGroupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REVEAL_AT_END
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.revealAtEnd = iprot.readBool();
              struct.setRevealAtEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRevealAtEnd()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'revealAtEnd' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResultGroups struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.groups != null) {
        oprot.writeFieldBegin(GROUPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.groups.size()));
          for (ResultGroup _iter11 : struct.groups)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVEAL_AT_END_FIELD_DESC);
      oprot.writeBool(struct.revealAtEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultGroupsTupleSchemeFactory implements SchemeFactory {
    public ResultGroupsTupleScheme getScheme() {
      return new ResultGroupsTupleScheme();
    }
  }

  private static class ResultGroupsTupleScheme extends TupleScheme<ResultGroups> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResultGroups struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.groups.size());
        for (ResultGroup _iter12 : struct.groups)
        {
          _iter12.write(oprot);
        }
      }
      oprot.writeBool(struct.revealAtEnd);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResultGroups struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.groups = new ArrayList<ResultGroup>(_list13.size);
        ResultGroup _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new ResultGroup();
          _elem14.read(iprot);
          struct.groups.add(_elem14);
        }
      }
      struct.setGroupsIsSet(true);
      struct.revealAtEnd = iprot.readBool();
      struct.setRevealAtEndIsSet(true);
    }
  }

}

