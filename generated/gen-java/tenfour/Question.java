/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tenfour;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-26")
public class Question implements org.apache.thrift.TBase<Question, Question._Fields>, java.io.Serializable, Cloneable, Comparable<Question> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Question");

  private static final org.apache.thrift.protocol.TField QUESTION_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("questionText", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ASSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("assets", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ANSWERS_FIELD_DESC = new org.apache.thrift.protocol.TField("answers", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuestionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuestionTupleSchemeFactory());
  }

  public String questionText; // required
  public List<Asset> assets; // required
  public List<Answer> answers; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUESTION_TEXT((short)1, "questionText"),
    ASSETS((short)2, "assets"),
    ANSWERS((short)3, "answers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUESTION_TEXT
          return QUESTION_TEXT;
        case 2: // ASSETS
          return ASSETS;
        case 3: // ANSWERS
          return ANSWERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUESTION_TEXT, new org.apache.thrift.meta_data.FieldMetaData("questionText", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSETS, new org.apache.thrift.meta_data.FieldMetaData("assets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Asset"))));
    tmpMap.put(_Fields.ANSWERS, new org.apache.thrift.meta_data.FieldMetaData("answers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Answer"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Question.class, metaDataMap);
  }

  public Question() {
  }

  public Question(
    String questionText,
    List<Asset> assets,
    List<Answer> answers)
  {
    this();
    this.questionText = questionText;
    this.assets = assets;
    this.answers = answers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Question(Question other) {
    if (other.isSetQuestionText()) {
      this.questionText = other.questionText;
    }
    if (other.isSetAssets()) {
      List<Asset> __this__assets = new ArrayList<Asset>(other.assets.size());
      for (Asset other_element : other.assets) {
        __this__assets.add(other_element);
      }
      this.assets = __this__assets;
    }
    if (other.isSetAnswers()) {
      List<Answer> __this__answers = new ArrayList<Answer>(other.answers.size());
      for (Answer other_element : other.answers) {
        __this__answers.add(other_element);
      }
      this.answers = __this__answers;
    }
  }

  public Question deepCopy() {
    return new Question(this);
  }

  @Override
  public void clear() {
    this.questionText = null;
    this.assets = null;
    this.answers = null;
  }

  public String getQuestionText() {
    return this.questionText;
  }

  public Question setQuestionText(String questionText) {
    this.questionText = questionText;
    return this;
  }

  public void unsetQuestionText() {
    this.questionText = null;
  }

  /** Returns true if field questionText is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionText() {
    return this.questionText != null;
  }

  public void setQuestionTextIsSet(boolean value) {
    if (!value) {
      this.questionText = null;
    }
  }

  public int getAssetsSize() {
    return (this.assets == null) ? 0 : this.assets.size();
  }

  public java.util.Iterator<Asset> getAssetsIterator() {
    return (this.assets == null) ? null : this.assets.iterator();
  }

  public void addToAssets(Asset elem) {
    if (this.assets == null) {
      this.assets = new ArrayList<Asset>();
    }
    this.assets.add(elem);
  }

  public List<Asset> getAssets() {
    return this.assets;
  }

  public Question setAssets(List<Asset> assets) {
    this.assets = assets;
    return this;
  }

  public void unsetAssets() {
    this.assets = null;
  }

  /** Returns true if field assets is set (has been assigned a value) and false otherwise */
  public boolean isSetAssets() {
    return this.assets != null;
  }

  public void setAssetsIsSet(boolean value) {
    if (!value) {
      this.assets = null;
    }
  }

  public int getAnswersSize() {
    return (this.answers == null) ? 0 : this.answers.size();
  }

  public java.util.Iterator<Answer> getAnswersIterator() {
    return (this.answers == null) ? null : this.answers.iterator();
  }

  public void addToAnswers(Answer elem) {
    if (this.answers == null) {
      this.answers = new ArrayList<Answer>();
    }
    this.answers.add(elem);
  }

  public List<Answer> getAnswers() {
    return this.answers;
  }

  public Question setAnswers(List<Answer> answers) {
    this.answers = answers;
    return this;
  }

  public void unsetAnswers() {
    this.answers = null;
  }

  /** Returns true if field answers is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswers() {
    return this.answers != null;
  }

  public void setAnswersIsSet(boolean value) {
    if (!value) {
      this.answers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUESTION_TEXT:
      if (value == null) {
        unsetQuestionText();
      } else {
        setQuestionText((String)value);
      }
      break;

    case ASSETS:
      if (value == null) {
        unsetAssets();
      } else {
        setAssets((List<Asset>)value);
      }
      break;

    case ANSWERS:
      if (value == null) {
        unsetAnswers();
      } else {
        setAnswers((List<Answer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUESTION_TEXT:
      return getQuestionText();

    case ASSETS:
      return getAssets();

    case ANSWERS:
      return getAnswers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUESTION_TEXT:
      return isSetQuestionText();
    case ASSETS:
      return isSetAssets();
    case ANSWERS:
      return isSetAnswers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Question)
      return this.equals((Question)that);
    return false;
  }

  public boolean equals(Question that) {
    if (that == null)
      return false;

    boolean this_present_questionText = true && this.isSetQuestionText();
    boolean that_present_questionText = true && that.isSetQuestionText();
    if (this_present_questionText || that_present_questionText) {
      if (!(this_present_questionText && that_present_questionText))
        return false;
      if (!this.questionText.equals(that.questionText))
        return false;
    }

    boolean this_present_assets = true && this.isSetAssets();
    boolean that_present_assets = true && that.isSetAssets();
    if (this_present_assets || that_present_assets) {
      if (!(this_present_assets && that_present_assets))
        return false;
      if (!this.assets.equals(that.assets))
        return false;
    }

    boolean this_present_answers = true && this.isSetAnswers();
    boolean that_present_answers = true && that.isSetAnswers();
    if (this_present_answers || that_present_answers) {
      if (!(this_present_answers && that_present_answers))
        return false;
      if (!this.answers.equals(that.answers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_questionText = true && (isSetQuestionText());
    list.add(present_questionText);
    if (present_questionText)
      list.add(questionText);

    boolean present_assets = true && (isSetAssets());
    list.add(present_assets);
    if (present_assets)
      list.add(assets);

    boolean present_answers = true && (isSetAnswers());
    list.add(present_answers);
    if (present_answers)
      list.add(answers);

    return list.hashCode();
  }

  @Override
  public int compareTo(Question other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuestionText()).compareTo(other.isSetQuestionText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionText, other.questionText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssets()).compareTo(other.isSetAssets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assets, other.assets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswers()).compareTo(other.isSetAnswers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answers, other.answers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Question(");
    boolean first = true;

    sb.append("questionText:");
    if (this.questionText == null) {
      sb.append("null");
    } else {
      sb.append(this.questionText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assets:");
    if (this.assets == null) {
      sb.append("null");
    } else {
      sb.append(this.assets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answers:");
    if (this.answers == null) {
      sb.append("null");
    } else {
      sb.append(this.answers);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (questionText == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'questionText' was not present! Struct: " + toString());
    }
    if (assets == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'assets' was not present! Struct: " + toString());
    }
    if (answers == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'answers' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuestionStandardSchemeFactory implements SchemeFactory {
    public QuestionStandardScheme getScheme() {
      return new QuestionStandardScheme();
    }
  }

  private static class QuestionStandardScheme extends StandardScheme<Question> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Question struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUESTION_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.questionText = iprot.readString();
              struct.setQuestionTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ASSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.assets = new ArrayList<Asset>(_list16.size);
                Asset _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new Asset();
                  _elem17.read(iprot);
                  struct.assets.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setAssetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ANSWERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.answers = new ArrayList<Answer>(_list19.size);
                Answer _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new Answer();
                  _elem20.read(iprot);
                  struct.answers.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setAnswersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Question struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.questionText != null) {
        oprot.writeFieldBegin(QUESTION_TEXT_FIELD_DESC);
        oprot.writeString(struct.questionText);
        oprot.writeFieldEnd();
      }
      if (struct.assets != null) {
        oprot.writeFieldBegin(ASSETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.assets.size()));
          for (Asset _iter22 : struct.assets)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.answers != null) {
        oprot.writeFieldBegin(ANSWERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.answers.size()));
          for (Answer _iter23 : struct.answers)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuestionTupleSchemeFactory implements SchemeFactory {
    public QuestionTupleScheme getScheme() {
      return new QuestionTupleScheme();
    }
  }

  private static class QuestionTupleScheme extends TupleScheme<Question> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Question struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.questionText);
      {
        oprot.writeI32(struct.assets.size());
        for (Asset _iter24 : struct.assets)
        {
          _iter24.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.answers.size());
        for (Answer _iter25 : struct.answers)
        {
          _iter25.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Question struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.questionText = iprot.readString();
      struct.setQuestionTextIsSet(true);
      {
        org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.assets = new ArrayList<Asset>(_list26.size);
        Asset _elem27;
        for (int _i28 = 0; _i28 < _list26.size; ++_i28)
        {
          _elem27 = new Asset();
          _elem27.read(iprot);
          struct.assets.add(_elem27);
        }
      }
      struct.setAssetsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.answers = new ArrayList<Answer>(_list29.size);
        Answer _elem30;
        for (int _i31 = 0; _i31 < _list29.size; ++_i31)
        {
          _elem30 = new Answer();
          _elem30.read(iprot);
          struct.answers.add(_elem30);
        }
      }
      struct.setAnswersIsSet(true);
    }
  }

}

